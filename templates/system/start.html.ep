<!DOCTYPE html>
<html>
    <head>
        <link href='/css/roboto.css' rel="stylesheet" type="text/css">
        <link href='/css/icons.css' rel="stylesheet" type="text/css">
        <link href="/css/vuetify.min.css" rel="stylesheet">
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui">
    </head>
    <body>
        <div id="app">
            <v-app light id="inspire">
                 <v-content>
                   <v-container fluid>
										<v-layout row wrap>
											<v-flex xs12>
											<form-generator :schema="schema"
													v-model="formData">
											</form-generator>
											</v-flex>
									  </v-layout>
									</v-container>
<!--              <component :is="currentView" keep-alive></component> -->
									Hello {{formData.title}} {{formData.firstName}} {{formData.lastName}}, I hear you are {{formData.age}} years old. {{formData.yourchoice}}
                </v-content>
            </v-app>
        </div>

        <script src="/js/vue-2.5.16.js"></script>
        <script src="/js/vuetify.js"></script>
        <script src="/js/http-vue-loader.js"></script>
        <script src="/js/vuex-3.0.1.js"></script>
        <script src="/js/axios.min.js"></script>

        <script>
        
            const theme = {
                primary: '#2d325a',
                secondary: '#304b78',
                accent: '#56bda2',
                error: '#dbb13b',
                warning: '#dbb13b'
            }
 
 
            const store = new Vuex.Store({
					strict: true,
					modules: {
						main: {
							namespaced: true,
							
							state: {
								count: 0,
								pong: '',
								status: '',
								wsMsg: ''
							},
							mutations: {
//								TODO : Find away to use a single manipulation to store the data
//								storeChannelData (state, channel, data) {
//									state.channel = data
//								},
								pongStore (state, data) {
									state.pong = data
								},
								statusStore (state, status) {
									state.status = status
								}
							},
							actions: {
								storeChannelData (context, payload) {
										context.commit(payload.channel+'Store', payload.data)
								},
// 								loadBlockChainStatus (context) {
//                                     axios.get('/v1/api/multichain/blockchainStatus')
//                                     .then(res => {
// 													let data = JSON.parse(res.data);
//                                         context.commit('statusStore', data)
//                                     })
//                                     .catch(function (error) {
//                                         console.log(error)
//                                     })
// 								},
								sendMessage (context, payload) {
									ws.send(JSON.stringify({"createApp": {"appName": this.name,
										"appDesc": this.description,
										"appConnect": this.connect,
										"appSending": this.sending,
										"appReceive": this.receive}}))
										
								} 
							},
							getters: {
									loadedNavitems (state) {
										return state.loadedNavitems
									},
									getStatus (state) {
										return state.status
									},
									getPong (state) {
										return state.pong
									}
							}	
						}
					}
				})
				
				const ws = new WebSocket(((window.location.protocol === "https:") ? "wss://" : "ws://") + window.location.host + "/wsapi");

							new Vue({ 
								el: '#app',
								name: "GeneratorDemo",
                data: {
                    currentView: "scan",
                    formData: {
										},
                    schema: [
											{
												fieldType: "vselect",
												name: "title",
												label: "Title",
												options: ["Mr", "Ms", "Mx", "Dr", "Madam", "Lord"]
											},
											{
												fieldType: "vtextfield",
												placeholder: "First Name",
												label: "First Name",
												name: "firstName"
											},
											{
												fieldType: "vtextfield",
												placeholder: "Last Name",
												label: "Last Name",
												name: "lastName"
											},
											{
												fieldType: "vslider",
												placeholder: "Age",
												name: "age",
												label: "Age",
												minValue: 0
											},
											{
												fieldType: "vradiogroup",
												name: "yourchoice",
												label: "Title",
												options: ["Mr", "Ms", "Mx", "Dr", "Madam", "Lord"]
											}
										]
                },
                store,
                ws,
                computed: {
                },
                components: {
									<%== $import_components %>
                },
                methods: {
                    switchComponent: function(compName){
                        console.log(compName);
                        this.currentView = compName;
                        this.dialog = true;
                    }
                },
								created() {
										var self = this;
											setInterval(() => {
												ws.send(
													JSON.stringify({'channel' : "ping",'data' : {}})
												)
											}, 3000)
											
					
										this.$store.dispatch('main/loadBlockChainStatus')


										ws.onopen = e => {
												console.log("Socket Open")
												ws.send(
													JSON.stringify({'channel' : "status",'data' : {}})
												);
										};
										
										ws.onmessage = e => {
												let data = JSON.parse(e.data);
												console.log(data)
												if (data.channel == 'status') {
												console.log("status channel found")
												this.$store.dispatch('main/loadBlockChainStatus')
												} else {
												self.$store.dispatch('main/storeChannelData',data)
											}
										};

										this.$store.getters.getStatus
										
													this.$vuetify.theme = theme
													fetch('/nav')
													.then(response => response.json())
													.then(json => {
															this.navitems = json.navitems
													})
													
											},
								beforeDestroy(){
			//						socket.$off("message", this.handleMessage)
								},
                props: ["value"]
            })


        </script>
    </body>
</html>
